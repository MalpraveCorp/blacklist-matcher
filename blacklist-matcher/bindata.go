// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// blacklist.txt
// main.go
// main_test.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _blacklistTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x57\x4d\x96\xf4\xba\x09\x9d\xb3\x0a\x8d\x32\xcb\xe0\xbd\x73\xb2\x20\x2c\x53\x36\x6d\x49\xe8\x01\x2a\xb7\x7b\x1f\xc9\x34\x5b\xcc\x12\x72\x90\xab\xea\xfb\x4e\x32\x68\xb8\xfa\x2b\xc9\xd2\xe5\x42\xff\xb9\xfd\x91\xe1\xcf\xb4\xb1\x16\x4b\x7f\xa4\x3c\x3a\x60\x56\x71\xa9\xd2\x77\x2e\x8c\x80\x05\x17\xac\x98\x76\xf1\xd4\x25\x1f\xe4\xd1\x65\x07\xb6\xd4\xb9\x53\xe1\x46\x80\x0d\x0b\x60\xe3\xc2\x6d\x1b\x06\xd8\xc2\x74\xb2\x9d\x1d\x50\x8d\x76\x29\x04\x68\x16\x7f\x6f\x5c\x47\xcb\x3b\xe0\x70\x49\xa4\xe2\x9c\x27\x7e\xc1\x05\x17\x2a\xd8\xd6\x00\x57\x5a\xd0\x9d\xf4\xc6\x5f\x83\x33\xc1\x82\xa5\xa4\x0d\xb7\x17\x50\x7c\x5e\x37\x3c\x38\x1f\xdc\x5e\xfd\xe5\xf7\x86\x61\x3e\x5e\x68\xbc\xbb\xdb\xb6\xa8\x18\x2c\xa8\xb4\xdc\xc3\x4a\xe5\x4a\x85\x36\x2c\xb3\xd1\xf0\xa0\x38\x84\x39\xea\xc7\xcb\x04\xdc\x30\xd0\x72\xc2\xb2\x5a\x85\x85\xb0\xc5\x19\xa7\xb3\xf0\x4f\xd2\x94\xcb\xf4\xef\x66\xe1\x1e\x43\xe6\x8c\x85\xfd\x82\x85\xb7\xb4\x94\xb9\x73\x20\x25\x34\xb7\x89\x8f\x16\x57\xad\x77\xc3\x79\xf6\xd6\x25\xce\xca\xba\x16\x99\x2b\x3c\xef\xb7\x25\x83\xf9\x2b\x29\xcf\x81\x22\x6d\xa5\x84\xd9\x59\xda\xbb\x25\x2d\xfd\x5f\xff\xf9\x25\xcb\xf4\xe9\x03\x2e\x19\x9a\x8a\xe0\x0a\x4b\x19\x94\x4e\x7c\x3c\x0a\x05\xae\xfd\xe0\x06\x8b\x94\xd8\xdb\x60\x91\xb6\xe2\x46\xe1\xe3\xeb\x24\xd6\x8b\x2c\x31\x20\x7e\xa5\x8c\xa5\xc0\xa2\x72\xb6\x64\xbb\x9c\xf3\x3b\x74\x34\x72\xff\xb5\xff\x38\x0e\x3c\x08\x96\x51\xca\x7a\xbd\x00\x79\x7a\xf2\x72\xe3\x49\x9e\x65\xb4\x2d\x4d\xc6\x04\x7a\x01\x8b\x9b\x1b\xee\xd3\xe4\x9d\x28\x0e\x34\xdc\xe7\x70\xc6\x4a\x25\xb9\x4c\x14\xb4\x0e\x6f\x65\x78\xf8\x73\x17\x8d\x01\xed\xe4\x69\x12\x90\xf4\xd5\xfc\xb4\x76\xc9\x52\xd0\x29\xa9\x18\x2d\x63\x35\xc8\xac\xb9\xd0\x17\xe9\x01\xb9\xd0\x73\x12\x33\x99\x13\xd6\x98\x5f\xd8\xa7\x11\x65\x83\x5c\xe4\x7e\x76\xac\x3d\x5a\xc3\x9c\xf4\x31\xf2\x01\xf3\x69\xf2\xbc\xbc\x2c\x5d\xa5\xe0\xd6\x18\x6f\xfc\x8a\xb4\x2c\xda\xee\x6f\x10\x69\xd3\x18\x64\x25\xac\x9d\x09\xf2\xa8\xf1\x57\x83\xb8\x79\xb4\x4f\xac\xe5\xd1\x1c\x56\xd4\x83\x09\xd6\x79\x6c\xec\x37\xba\x01\x51\x4f\xbe\xab\xa0\x4f\xfc\x81\x6d\xfd\xec\xbb\x72\x3e\x60\xe5\xb2\x0a\xac\xdc\xb6\x42\x0b\xa9\x5e\xbf\x61\x26\x83\x95\xd5\xaf\xd4\xb9\x14\x39\xdf\x2d\xc3\xb8\xb3\x1f\x58\x65\xdb\x98\x92\xf9\x55\xe8\xd5\xf8\x85\xaf\xdf\xfa\xaf\x0f\xfc\x74\x96\x4c\xee\xb0\x4a\xe5\x86\x93\x18\x2f\xa8\xfc\x1d\xb0\xc6\xd6\xd2\x0e\xba\x52\x9f\x82\xb1\xca\x58\x0a\xa5\x55\xda\xf6\xc6\x9d\x1a\xb9\xbe\x56\xf7\x37\xc1\x56\xbd\xd2\x3e\x6a\x87\xf5\xb9\x22\x10\x7a\xaa\x57\x0a\x0d\xa2\x9c\x77\x06\xfa\xc2\x3c\xca\xbd\xe8\x25\x3a\xd3\x59\x05\xb2\x2c\xea\x40\xa3\x8d\xbc\xc3\x03\xb7\xf8\xdb\xc4\xe1\x41\x19\x0b\x3c\xa8\x44\x37\x95\xb9\x3a\x80\xcf\x76\xc5\x42\xc9\xfe\x1a\xac\x1e\x8f\xf4\xa0\xba\x4a\x85\x07\x6f\xdb\x6c\x72\xdb\x48\x43\x72\x5e\xf0\xee\xb4\x7b\xae\x88\xa7\x07\x39\xdb\x3e\x71\xc4\xe3\x43\xc5\xef\xc1\xa0\x4f\x98\x14\x24\x0f\x52\x3c\xa6\x80\xbd\xdc\x3d\x21\x74\x29\x06\xd6\x8d\x52\xc7\x90\x8e\xbb\xf1\xc1\x8e\x0d\x95\x61\xc3\xb6\xa5\x79\x8a\x0d\xaf\x64\xf4\x0d\x1b\x35\x76\x2c\x06\x1b\x63\xf3\x5b\x42\x22\x6e\x92\xb4\xb7\x4f\x2e\x1d\xee\x14\xb1\x49\xa3\x74\x72\x59\x61\x13\xf4\xfc\x3d\x9d\x11\x6c\xb2\xa6\x15\x6b\x83\x4d\x8e\x63\x84\x2b\x2b\xbd\xa3\x1f\x36\x91\xb5\x4b\xfc\x88\xc8\xcc\x35\xb0\x89\xd2\x86\x56\x61\x53\xe9\x14\x76\xf4\xfb\x38\x7f\xb7\x2e\x0e\xdb\x50\x81\x3d\x02\x2d\xee\x22\xc0\xed\x75\x4d\x39\x62\x38\xd0\x0d\xa8\x39\x32\xec\x52\xdf\xb9\x63\x9f\x74\x81\x5d\x24\xbe\x3c\xd2\x56\x46\x2d\x37\xd8\x83\xea\xbb\x9c\xc9\x25\x1d\x5c\xca\x1b\xd7\xa1\x6b\x4c\x1e\x1b\xa5\x07\x3a\x04\x71\xe2\x6a\xb9\x65\x32\x07\x6e\x4e\x9a\x65\xa8\x11\x7c\x85\xd0\xca\xe3\x01\x5f\xc8\x25\x2d\xc8\x3e\xd1\x0d\xa8\x94\x2b\xb8\x39\x02\xeb\x6b\x1e\x6f\xb8\x88\x84\xff\x05\x48\x6f\xf4\xf3\x03\x5f\x63\xdb\x0c\x0e\x3e\x08\x0e\x6e\x0b\x1e\x23\xfc\x11\xca\x31\xc1\x05\x47\x93\x65\x89\xe3\x14\x42\xdf\x49\x93\x92\xb9\x22\x37\xff\xf4\xcc\xf6\xb6\x7b\x8a\xe3\x51\xf4\x57\x69\xa9\xa3\xfa\x05\x45\x0a\x3b\x42\x48\x53\xc5\xc9\x98\x8a\x07\xa5\x4a\x29\x4b\x25\xf8\x1f\xde\x56\x34\x1f\xba\xa0\x13\x54\x6a\xb8\x51\xc2\xe4\x2a\x6c\x50\xb9\x3c\xa0\xb2\x19\x4b\x43\xbd\x52\x17\xe3\x19\x3f\x55\xe2\x0c\x41\x43\x52\xa8\x32\xda\x9a\xe4\x91\x9e\x14\x65\x40\xd5\x14\xaf\x67\x50\xc7\xe3\x91\x56\x8e\x6c\x18\x70\xe5\x67\xec\xd6\xb0\x2e\x05\xa1\xe1\x89\xb6\x33\x34\xda\x54\xa0\x91\x34\xfc\x61\x68\x71\x63\xd3\x92\x86\x4b\x4d\x36\x68\x5c\xfb\x2e\x15\x43\x3d\x1b\xf7\x5e\xe8\xe5\x0c\x9a\x3d\xce\xc4\x15\xb7\xc0\x63\xa5\x30\x91\x66\xdb\x15\x4b\x5e\xee\x5e\x29\xd9\xa5\x0f\xb3\x0b\xa4\x8a\xce\xbd\x83\xd9\x79\xf4\xe4\xe7\xcd\x51\x9b\x3d\xdb\xb8\x52\xf8\x2f\x54\x10\x9d\x94\x15\xdd\x2e\xe8\x48\xeb\x14\x50\x82\x8e\x07\x43\xc7\xe6\xa1\x93\xe1\x2f\xe8\xb4\xca\x42\xa8\x13\xbc\x66\xd1\x2d\x04\x9d\x1a\x1b\xf4\x3d\x7e\x34\x08\xdf\x99\x32\xc5\x7d\xcd\x84\xd7\xe3\x7a\x63\x16\x9b\xa5\xce\x37\x98\xbe\xe0\xb5\xc8\x05\xbd\x10\xda\x50\x4a\x91\xf6\x1d\xba\xc4\xe3\xd5\x49\xf5\x2e\xed\x8a\x69\xd0\x45\x1e\x61\xda\x34\x1e\xd1\xde\x47\xc3\x36\x47\x7a\xca\xfb\x70\x9a\xf0\x8d\xb4\x4d\x23\xb7\xdd\x14\xfb\x7e\x41\xd7\x60\x7f\xc2\xb2\x90\x7a\xea\x4c\x9a\xe7\xc9\x7c\xcf\xd0\xc7\x12\xdf\x3a\x2f\xf0\xaf\x41\xf8\x08\x4b\x61\xb9\x82\xe2\xb6\x13\xae\xe1\x39\xd4\x66\xd6\x08\x33\x1b\x29\xce\xa8\x0a\x67\x0e\x4a\xd9\x47\x05\xa5\x27\xa9\x05\x19\xcf\x29\x0d\xca\x35\x62\x5d\xf9\x4e\x76\x2a\x76\xa5\x8e\xa5\xfe\x42\x29\x74\x21\x58\xff\x8f\x64\x1c\x71\x62\xa0\x51\x15\x04\x4f\x6b\x6c\x07\x86\x6b\x28\xb9\x61\x73\xd1\x51\xc1\x32\x3a\x58\xde\x4b\xa4\x0d\xcb\x6c\x26\x53\x80\x8d\x2a\x35\x88\x67\x30\xfa\x96\x30\x17\xd8\x8e\x4f\x5a\xd3\x5d\xb2\xbd\x5b\xf7\xa7\xda\x3e\x55\x1e\x6c\xe7\x25\xd4\x74\x3e\x59\x98\xa5\x70\xed\x13\x79\xcc\x12\x47\xb0\x5d\xf9\x16\x11\x3b\x88\x1c\xac\x60\x73\xba\x08\x66\x31\x62\x7f\xab\x60\x35\x40\xc3\x48\x1f\xd6\xe4\x8c\xe2\x74\xce\x97\xc8\x81\x3f\x74\x83\x0b\xac\x73\x06\xeb\x45\x64\xa3\xb7\x4f\x55\xc4\xa2\xf5\xea\x54\xc2\x35\xea\x56\x03\xeb\xa3\x1d\x10\x7a\xd0\x43\xc2\x27\x78\xfb\x1e\x25\xab\xb9\x72\x4f\xb9\x8c\x05\x66\x12\x4e\x33\x33\x43\x54\xc5\xd3\x18\xd8\xe0\xcc\x2b\xbd\xa2\xc0\x46\x71\xbd\xd2\x29\xf3\xaa\xce\x28\x7d\x0f\x04\x3b\x67\x16\x03\x0f\x19\xa2\x35\x85\xba\x80\xa3\x39\xa5\x7a\x81\x13\xa6\x05\x6f\xc2\xfb\xae\x44\x16\x4a\x73\x17\x1f\xb3\x8f\x69\x4d\xa3\x83\x4f\xcd\x3a\x77\x76\x02\x67\x87\x59\xe9\x3a\xfb\x0c\x25\x9f\xb7\xe9\xd2\xb6\x41\x89\x5b\x42\x70\x89\x38\x37\x70\x31\x8b\xbd\xe5\xa4\x32\xa9\xe6\x8a\xad\x5d\xe0\xca\xcb\xfd\xf2\x3e\x96\x3b\xd1\xf8\x58\x5e\xde\xf6\x0b\xfc\x44\x07\x3f\xb9\x1d\xb7\x65\x82\x4f\xb8\xa7\x97\x00\xc0\x68\xab\xd2\x1d\x86\xa3\xdb\xc1\xea\x30\x94\x7c\x57\x4c\x33\xbc\xc6\xa7\x72\x7a\x06\xc3\x11\xa6\xd2\xa5\x29\x7c\xf0\xe4\x45\xd1\x45\xe1\xc9\x12\xf5\xec\x19\xff\xc5\x3c\x45\x51\xe9\xbd\x48\x2e\x1a\x0a\xcf\x51\x9e\x08\x27\xb6\x03\x4e\xf2\xf9\xef\xc7\x49\x9e\xd6\x28\xf8\x60\xde\x48\xea\x33\x79\x9e\xf1\x70\x11\x48\x71\xff\xa7\x72\x3b\x0a\x45\xfd\x89\xfa\x88\x7a\xe1\xfb\x1b\xbe\xbf\xbf\xe1\x42\x61\xb8\x28\xca\xb3\x4f\xcd\x7d\xf1\xe3\x71\xc1\x8f\xbc\x8f\xfb\x9f\x7f\xff\xeb\x9f\xff\x0d\x00\x00\xff\xff\x89\x14\xeb\x90\xf1\x0d\x00\x00")

func blacklistTxtBytes() ([]byte, error) {
	return bindataRead(
		_blacklistTxt,
		"blacklist.txt",
	)
}

func blacklistTxt() (*asset, error) {
	bytes, err := blacklistTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blacklist.txt", size: 3569, mode: os.FileMode(436), modTime: time.Unix(1601724492, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xdf\x8b\xdb\x46\x10\x7e\xd6\xfe\x15\x53\x41\x41\x02\x45\x72\x4b\xfb\x72\xe5\x0a\xc9\xd1\x1f\x57\xd2\xf6\xa8\x03\x7d\x08\x21\x8c\xa4\x91\xbd\xdc\x6a\x57\xd9\x5d\xf9\x6c\x82\xff\xf7\x32\xbb\x2b\xe5\x12\x5f\x49\x88\xe1\x2c\xdd\xcc\xb7\x33\xdf\x7c\x9a\x19\x79\xc2\xee\x1e\x77\x04\x23\x4a\x2d\x84\x1c\x27\x63\x3d\x14\x22\xcb\x3b\xa3\x3d\x1d\x7d\x2e\xb2\x7c\x18\xc3\x65\x42\xbf\xe7\x6b\x3b\x0f\xd2\xf0\x8d\x71\xb9\x10\x59\xbe\x33\x0a\xf5\xae\x36\x76\xd7\x1c\x1b\x3e\xd3\x38\x42\xdb\x05\xec\xa5\x8f\xff\x9f\x71\x47\xf1\xa8\xf4\xfb\xb9\xad\x3b\x33\x36\xf8\xe0\xf8\xef\x99\xc2\xb1\xed\xf1\xd9\xce\x34\x74\x20\xed\x5d\xfe\x39\x58\xbc\xe3\x70\x4d\x03\x8f\xa1\x9d\x32\x73\x3f\x28\xb4\xd4\xe0\xde\x74\xc6\xa2\x93\xdd\x7d\x2e\x4a\x21\xfc\x69\x22\xf8\x87\xdc\x64\xb4\x23\x88\x89\xea\xe7\x77\xb7\xbf\xa1\xa7\x07\x3c\xdd\x59\x73\x3c\x2d\xee\x05\xfc\x6e\x26\xe7\xff\x17\x1b\xbc\x42\x0c\xb3\xee\xe0\x77\xd4\xbd\x22\x5b\x74\xfe\x08\x49\xc6\xfa\x26\x5e\x2b\xb0\x29\x50\x3a\x52\x42\xb1\x24\xaa\x80\xac\x35\xb6\x84\xf7\x42\x64\xad\xc2\xee\x5e\x49\xe7\x83\x15\xae\xae\x41\x19\xec\xff\x35\xb6\x7f\xb1\x78\x8a\x52\x64\x72\x08\xee\x6f\xae\x41\x4b\x05\xef\x45\x96\x59\xf2\xb3\xd5\x6b\x71\x6c\xca\xb6\x1e\xfd\xec\x6e\x4c\x4f\x57\x10\x3e\x3f\x6e\x36\x15\x3b\x5e\x98\xfe\x94\x4c\xf1\x33\x8c\xbe\xde\x4e\x56\x6a\x3f\x14\xf9\x0d\x6a\x6d\x7c\x48\x0c\x2b\x1f\xe8\xd1\x63\x8b\x8e\xf2\x92\x43\x9c\x2b\xce\x2c\xb2\xb3\x10\xd9\x83\xb1\x7d\x05\x83\x99\x75\xcf\x84\x07\xa9\x3f\x90\x65\xe6\xc5\xa3\xa2\x92\x0c\x35\x33\x28\xe3\xb3\x4b\xcc\x8d\x86\x41\x5a\xe7\x61\x44\xdf\xed\x43\x89\x31\xe4\xf5\x35\x78\x3b\xd3\x97\x57\xf9\xc3\x17\x55\xb9\x9d\xdb\x51\x3a\x27\x8d\x06\xe9\x40\xea\x03\x2a\xd9\xd7\xf0\x6b\xc8\x19\x18\x03\x53\xa6\x1e\xee\xe9\xc4\x25\x5e\xc1\xb7\x2e\xaf\x80\x6f\x2f\x24\x78\x82\xd7\x05\xad\xef\x23\xad\x0b\x56\x9f\x30\x09\x3c\xf2\x4a\x2c\xf1\xc5\x59\x88\xa6\x81\xbd\xf7\x93\xbb\x6a\x9a\xcf\x36\x3a\x83\xdd\x3c\x4d\xc6\x51\xaf\x4e\xd0\x92\xf7\x64\x01\x93\xae\x52\xef\x40\xa1\xdd\x11\xe8\x79\x6c\xc9\x82\x19\x60\x42\x86\x68\xc7\x20\xa3\x3b\xe2\x08\xed\xec\x61\x22\x3b\x18\x3b\xa2\xee\x08\x1c\xd1\x08\xde\x40\x4b\x40\xef\x66\x79\x20\x45\xda\xb3\xc1\x79\xd4\x3d\xda\x1e\x94\x6c\x2d\xda\x13\x0c\xc6\x72\x00\x4f\xce\x3b\x78\x90\x7e\x0f\xdf\x6d\x36\x8e\xf3\x24\x1d\x1d\xa0\xee\x01\xa1\x35\xfd\x89\xcd\x3c\x1f\x30\xeb\x9e\x2c\x23\x37\x41\x60\x57\xc7\x91\xba\xec\xa5\x18\xe1\xf5\x1b\xe7\xad\xd4\xbb\x0a\x9c\xed\x20\xde\x97\x10\x9c\xb0\x78\x62\xf7\xb4\xc6\x28\x1e\x2d\x56\x7a\xe4\xf6\x8c\x4b\xaa\xfe\x8b\x1e\x8a\x65\x27\xd5\xaf\xf6\x28\xab\xc5\x73\xbb\xd3\xc6\xd2\x0d\x3a\x2a\xc3\xa9\xc1\x58\x78\x5b\xc1\x81\x0f\x5b\xd4\x3b\x8a\x0c\x53\xcc\x4c\x56\xf0\x96\x5d\x63\x7d\xab\x7b\x3a\x6e\x43\xf6\xc2\xd9\xae\x82\x43\x99\x20\x43\x21\xe1\x67\xd8\x2c\x3c\xd6\x3e\x3e\x54\xa1\xb5\xa3\xf1\x1c\x2e\xf1\x3b\xf9\xf3\xbc\x82\x01\x95\xa3\x9f\x52\x17\x7c\x2c\xca\xcb\x24\xca\xf3\x0f\x4f\xff\xab\xf5\x69\x1a\xc8\x82\x3e\x8f\x5a\x89\x45\x8a\xf5\xfc\xc9\xbd\x43\x36\x46\x2f\x23\x38\x98\x5c\x2c\x3d\xf8\x8b\xd7\x6f\xda\x93\x27\xae\xbd\x8c\x18\x1e\xb8\x3b\x9e\x37\xa5\x8b\x50\x0b\xa7\x8c\x2e\x39\x14\x8a\x74\x91\xa2\x94\x8b\x3c\xec\x5a\xd4\x49\xbe\xa4\x11\x7b\xce\xe1\xfb\x53\x71\xd8\x78\x16\x69\x09\x3f\xb1\x2e\xe1\x42\x14\xde\x9d\xeb\xd2\xcd\xe8\x48\xdd\xec\xb1\x55\xb4\x2e\x5d\xe3\xea\x5f\x56\xeb\x93\x0b\x77\xd9\x27\x4b\x79\x64\x6d\x19\x77\xc1\x20\x3f\x0e\xf4\xf7\x44\xba\xe0\x97\x68\xfd\x87\x91\xba\x78\x9c\x2d\x5f\x37\x63\xed\x8f\x3e\x2f\x79\x23\x5e\xae\xf6\x35\xcd\x50\xe4\x03\x4a\x45\x3d\x98\x89\x34\x8f\x32\xe7\x4a\x7b\x29\x12\x58\xc4\xd1\x52\x05\x13\x53\xca\x5c\x87\x5a\x53\xe0\x13\x5e\xe2\xe1\xb9\x46\x5b\xc1\x11\xca\x15\x52\x6f\x27\x25\x7d\x11\x51\x0c\x79\x29\x35\xb9\x52\x64\x3c\x04\x2b\xa6\x43\x5d\x04\xe5\xb2\x28\xec\x35\xe0\x34\x91\x4e\xc3\x59\xad\xc0\x57\x74\xf4\x45\x19\x64\x09\xaa\xd4\x37\xca\xb8\x20\x67\x62\x99\xf0\xbc\xe6\xce\xe9\xf9\xf1\x0f\x92\x18\x3c\xbe\xe0\xeb\xad\x47\xeb\x8b\xf4\x6e\x2d\xc5\x59\xfc\x17\x00\x00\xff\xff\x69\xc0\x25\xfd\xbb\x08\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 2235, mode: os.FileMode(420), modTime: time.Unix(1601788980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _main_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xdf\x6e\xdb\xc8\xf5\xbe\x96\x9e\xe2\xfc\x04\xfc\x80\xb8\x50\x94\x20\x6d\x81\xc2\x40\x2e\x76\xdb\xb4\xdb\xa2\x17\x8b\x26\xbd\x2a\x8a\xc5\x98\x1c\x49\x83\x90\x43\x66\x38\xb4\x25\x04\x01\x4c\x72\xb3\xd5\xc6\x49\x57\x8a\xad\xd8\x8a\x15\x4b\x76\x14\x45\x92\x13\xa3\xa9\x13\xac\x36\x7f\x36\x8f\x31\x0f\x30\xa6\xfe\xbc\x45\x71\x48\x39\xd9\xa4\x8b\xb6\x57\x7b\x61\x8b\x9c\xf3\x9d\xef\x9c\xef\x9b\xe1\xcc\xb8\xc4\xb8\x4a\x4a\x14\x6c\xc2\xf8\x17\x92\x7a\x32\x9b\x65\xb6\xeb\x08\x09\x67\xb2\x99\x9c\xe1\x70\x49\x2b\x32\x97\xcd\xe4\x30\xc6\x78\x09\x1f\x8b\x76\x32\xe2\xad\x51\x22\xce\x7a\x06\xe1\xe7\x56\x2c\x62\x5c\xb5\x98\x27\xcf\xda\x44\x1a\x65\x2a\x30\x5e\x62\xb2\xec\xaf\x14\x0c\xc7\x3e\x47\xd6\x3c\xfc\x3b\x6b\x11\x7b\xc5\x24\x67\x4b\xce\x39\xba\x4a\xb9\xf4\x3e\x82\x79\x52\x50\x69\x94\xc5\xb9\xa4\x58\xb1\x7a\x8e\x78\x1e\x15\x32\x97\x5d\xca\x66\x65\xd5\xa5\xf0\x27\x7a\xcd\xa7\x9e\x84\x34\xbb\xf0\xc9\xe7\xbf\xff\x1d\x91\x74\x8d\x54\x3f\x17\x4e\xa5\xba\x88\x66\xb3\xab\x44\x80\x47\x8a\xf4\x0a\xad\xc8\x4b\xbc\x64\x31\xaf\x0c\x17\x21\xf7\x47\x47\x50\x1b\x98\xeb\xf9\x36\x98\x8e\xe5\x08\xf0\x98\x04\x62\x53\x99\x07\xc3\xe1\x1e\x35\x24\x95\xbe\x00\x62\x32\x97\x79\x06\xe3\x25\xa0\x16\x93\x79\xf0\xa8\x09\xa6\x03\x94\xf9\x9e\xed\x98\x20\x29\x3a\x04\x8c\x1b\xcc\x64\xa6\xcf\x25\xf8\x12\x2c\xb2\xe2\x08\x0a\x54\xa6\xd4\xe8\x68\x89\x13\x20\x16\xbb\xe6\x93\x02\xfc\x59\x02\xe5\xcc\x06\x62\x82\xcd\xf0\x61\x95\x72\x46\xec\x3c\x5c\xf3\x99\x07\xdc\xf1\xa4\xf0\x4d\xa0\x15\x2a\x0c\x26\x89\x64\x0e\x07\xdf\xb2\x88\x6d\x38\x29\x33\x82\x98\xc7\xb0\x52\x42\xc9\x5c\xa0\x15\xa0\x04\x0c\xc7\xb6\x1d\xd3\x49\x05\x5c\xf3\x89\x2c\xc0\x6f\x90\x92\xf8\x92\x02\x13\xbe\xa0\x0b\xad\x8c\x83\xa0\xae\xa0\x65\xca\x4d\x2a\x98\xc4\x81\x55\xc7\xf2\x5d\x49\x24\x85\x55\x54\x0a\xd4\xf3\x28\x18\xcc\xb2\x4e\x1d\xa2\x40\x7d\x28\xfa\x25\x46\x24\x70\x6c\x08\x5c\x22\x18\x91\xbe\x28\xc0\xa5\x8a\x41\x5d\x49\x7d\xb4\x91\x4b\x70\x0c\x83\x50\x83\x48\x30\x7c\x97\x99\x44\x62\x86\xc3\xc1\x15\x0e\x33\x29\x47\x17\xd1\x29\xc6\xc1\xf0\x2d\x97\xa0\x6e\x70\x8a\x45\x66\x30\x02\x26\xf5\xa8\xc0\xa8\xed\x58\xd8\x06\x41\x83\x98\x09\x38\xd5\x89\x7a\xdf\x2e\xe4\x3e\x9c\xd6\x3f\x10\xd7\xe1\xd4\xa3\x70\x11\x20\x17\x1f\xdd\xd7\xe1\xdb\x69\xe7\x20\xbe\xf9\x4c\x07\x47\x3a\x8c\x74\xd4\xd4\xd1\x93\xd9\xd3\x7f\xc4\xdd\xe7\x3a\x78\x74\xf2\x72\x63\x7a\xf8\x48\x47\x03\x1d\x75\xe3\xef\x9a\xf3\xf5\x8e\x0e\xda\x93\x5a\x3f\xee\xdd\xd3\xc1\xdf\x75\x58\xd3\x41\x7f\xb2\xfe\x60\xba\xfb\x5c\x87\x6f\x74\x78\xac\xc3\xd1\xec\x6d\x63\x36\x7c\xa6\xa3\x3d\x1d\x1d\xe8\x68\xa4\xa3\xe1\xf4\x70\x63\xd2\x6b\xcf\xfa\xc7\x17\xce\x4f\x7b\x2f\x75\xf0\x2c\xbe\xf5\x7c\xb2\xfd\xe8\x97\xf1\x9d\xee\xc9\x78\xac\xc3\x91\x0e\xbf\x8b\x8f\xee\x4f\x5f\xf4\xf1\x39\x7a\x12\xdf\xac\xc5\x6f\xbb\x3a\xd8\xd2\xe1\xba\x8e\x9e\xe8\xe0\x78\xb6\xd1\x9f\xf5\x8f\x75\xf0\x48\x07\x75\x1d\xec\xeb\x60\x18\x1f\xfd\x6d\xd2\xd9\x8c\x1b\x6f\xe6\xc1\x58\x07\x43\x1d\xf4\x74\xd0\xd5\xeb\x61\x3c\x1e\x4f\x5f\xdc\xd6\xc1\x38\x6e\x0f\x26\xb7\xd6\x75\xf8\x4a\x47\x5f\xea\x68\x47\x87\xc7\x93\x7f\xbe\x9a\xdc\x0e\x74\xf8\x56\x87\x83\xf8\x69\x7f\xf2\x7a\x4b\x07\xdf\xcf\xfa\xf7\x26\xed\xaf\x75\x54\xd3\xd1\x37\xf1\xed\x97\x27\xaf\x76\x74\xd0\x89\x7b\xf7\xe3\xee\x33\x1d\x6c\x62\xff\xc1\xa1\x0e\x37\x26\xfb\xb5\xf8\xce\xf3\x9f\xcf\x5b\x3d\x1d\xd6\xe6\x87\x3b\xb3\x87\x6f\x26\xe3\xe6\xc9\x78\x5d\x07\xdf\x63\xb8\x15\x9e\xbc\x7d\x18\xf7\x23\x1d\x7e\xa9\x83\x0d\x1d\x45\x7a\x3d\x9c\x3c\xdc\xd0\xc1\x60\xfe\xf8\x66\x5c\xef\x23\x11\xba\xf3\x62\xba\x7b\x34\xef\xee\xe8\xf0\x5b\x1d\x1e\xea\xe8\xae\x8e\x6a\xf3\x07\x07\x71\x63\xa0\x83\x06\x0a\x0e\x5e\x4f\xda\xb5\x5f\x4d\xc6\x4f\xb0\xe5\xa8\xa3\xa3\xfe\x6c\xef\xce\xfc\xde\xd7\x3a\xda\x99\x1d\xbf\x9e\x1f\xee\x24\x39\x77\x4e\xc6\x3b\xf3\xe8\x85\x8e\x6e\xe9\xe8\xab\xd9\xfa\xcd\x0b\xd3\xdd\x23\x1d\xb4\x74\xd0\xd1\xe1\x57\x3a\xdc\x98\xb6\x3b\xb3\xd1\x53\x1d\x34\x75\xd0\x99\x3d\xfd\x76\xd2\xae\xe9\x60\x57\x87\xc1\x64\x63\x3f\xae\xd5\x26\x1b\x77\x75\xf0\x42\x07\xdf\x7c\xb4\x32\x3e\xa3\x2b\x82\xae\xe1\xf7\xae\xea\xea\xb1\x1a\xa8\xba\x6a\x81\xba\xab\x5a\xaa\xae\x9a\xea\xae\x1a\xa8\x9e\x6a\xa9\x2d\x50\x0d\x50\x0d\x04\xe4\xf1\x77\x4b\x0d\xd5\xb6\x1a\xe1\xf8\x41\x92\xd5\x54\x5d\xd5\x54\x23\x50\x43\xd5\x46\xc0\xa6\x7a\x58\x48\x80\xa0\x5a\x6a\x57\x35\x71\x14\x51\xfb\xaa\x85\x28\x4c\xe9\x14\x40\xdd\x53\xbb\x6a\x00\x6a\x5b\x35\x55\x4f\x0d\xd3\x58\x5b\x35\x55\x4b\x3d\x56\x2d\xd5\x53\x9b\x69\xed\x3d\xb5\x55\x00\x55\x57\x5d\x55\x4f\x1a\xd9\x53\x75\xb5\x87\x89\x6d\xb5\x97\x14\x3e\x80\x24\x7b\x4f\x35\x93\xdf\x96\x7a\x90\x47\xd4\x26\x06\x46\xaa\xa9\x06\x48\xbc\xa5\x1e\x23\x03\x46\xf1\xa5\xae\x76\x92\x84\xfd\x44\xe1\x00\xeb\x6c\xaa\x51\x52\xa7\x89\xff\x06\xea\x11\xc2\x5a\xaa\x89\x78\xd4\xde\x4e\x25\x6e\xa9\x03\xd5\x50\x03\xec\x36\xbf\x40\x37\xd4\x50\xf5\x90\x01\xa9\xda\x09\x69\xf3\xd4\xb8\x3d\x35\x52\x9d\x3c\xa8\x5d\x35\x4a\x4d\xdc\xc2\xa4\xed\x84\xe0\x01\x2c\x5a\x40\xc1\xa9\xc6\x07\x88\xec\xaa\x96\xda\x4f\x5c\x4f\xac\x6a\x60\xd9\xa6\x1a\xa9\xa1\x6a\xaa\x46\xda\xc5\x36\x3a\x96\x47\xdd\x5d\x35\xc2\x39\xfb\x80\x73\x33\x79\xdc\x4d\x5f\x17\x95\x87\xaa\x5d\x40\x3b\xba\xea\x3e\x24\x36\xe0\x84\x1c\xa4\x90\x46\xa2\xb3\x9d\x4c\x79\x2b\xed\xb0\x99\x4f\xe5\xd7\x91\xaf\xa7\x46\x6a\x1b\x92\xea\x89\x1e\xcc\xd8\x5e\x50\x8c\x92\xb6\x4f\xb7\x1c\x9f\xff\xc8\x59\xf2\x09\x78\x52\x30\x17\x0c\xcb\x5f\x01\xdc\x6e\x71\x43\xf7\x29\xac\x95\xa9\xa0\x69\xcc\xa5\xc2\xc3\xed\x6f\x95\x99\x14\x88\xe9\x5b\x78\x04\x48\x2a\x24\x61\xdc\x4e\x76\x44\x57\x50\xd3\xb1\x19\x27\x5c\x5a\x55\xdc\x1a\x65\x99\x42\xd1\x11\x36\x38\xc5\x94\x43\x52\xe2\x51\x70\x04\x38\xb2\x4c\x05\x50\xe1\x48\x66\xe0\x3b\xad\x24\x4f\x26\xe1\x06\xf5\x0a\x70\xf9\x5d\x33\x1e\xc8\xaa\xcb\x0c\x62\x59\x55\x20\xa6\xe3\x4a\x20\xc0\x59\xa9\x2c\x93\x4e\x1d\x01\x2b\xf8\xad\xc8\xaa\x45\xf3\x40\xb8\x09\x06\xe1\x40\x2c\xcf\x79\x07\x96\x65\x4a\xa4\x48\x8a\x1a\x64\x85\x08\x2a\xcf\x26\x70\xb4\xa3\xe8\x73\x03\xae\x50\x4f\x7e\x46\xb8\x69\x51\x71\x46\xc2\xcf\x16\x17\x83\xc2\x95\x25\xb8\x9e\xcd\x66\x0c\x59\x81\xe5\x8b\xb0\xb8\x39\x14\x3e\x25\xc6\xd5\x92\x70\x7c\x6e\x9e\x59\xca\x66\x10\xeb\x61\xf8\x2f\x7f\xc5\x03\xcf\x90\x70\x3d\x9b\xc9\x88\xc5\xa9\x8e\x77\x90\xc2\xe9\x21\x9e\xc9\xd0\x8a\x4b\x0d\xf9\xa9\x63\x56\x21\x31\x83\x97\xde\x0d\xfe\xda\x31\x29\x00\xe3\x32\x9b\xb9\x81\x0c\xf8\x77\x4a\xb3\xfc\x01\xcf\x75\xcc\x5f\xfe\xf8\x36\x70\x23\x8f\x09\xef\x0b\x2c\x03\xe4\x2e\xfb\x2b\x36\xf3\x3c\x3c\x79\x99\x07\xab\xc4\x62\x66\xee\x07\x30\x2c\xb9\x0c\x70\xe1\xfc\x79\x1c\x4c\x08\xfe\xe7\xaa\xa7\x87\xd5\x4f\x5c\x36\xdd\x09\x7f\xa2\xa2\xff\xf6\x95\xfc\xf7\xba\x8c\x27\x95\x0b\xf0\x5b\x5c\x1f\x90\x5c\x22\x01\x6f\x91\xd4\x84\xab\xb4\xba\xe6\x08\x73\x79\xb1\xe4\x7f\xa4\xbb\x5f\xbc\xef\xee\x46\x36\x9b\x29\x3a\x02\xbe\xc8\x03\xae\x30\x5c\x60\x82\xf0\x12\x85\x74\xbd\xa5\x6b\xcc\x73\xf1\x86\x94\x07\x2a\x04\x02\x12\x09\xa7\xcb\xd8\x90\x95\x34\xb5\xb0\x90\xb8\x94\xcd\x64\x58\x31\xc1\xfe\xdf\x45\xe0\xcc\x4a\x48\x32\x45\x5b\x16\x2e\xbb\x82\x71\x59\x3c\x93\xfb\xff\x2b\xb9\x3c\x9c\xf2\x62\xc2\x8d\x6c\x26\x93\xde\x58\x0b\x97\xae\xf9\xc4\x3a\x23\x17\xa4\xef\xfb\x7e\x9f\x50\xb8\x2c\x89\xf4\x3d\x1c\x5c\xfa\xcf\x79\x68\xde\x0f\xf2\xf0\x75\x29\xd1\x7c\xe3\x5f\x01\x00\x00\xff\xff\xce\x8e\x12\xd4\xbd\x0b\x00\x00")

func main_testGoBytes() ([]byte, error) {
	return bindataRead(
		_main_testGo,
		"main_test.go",
	)
}

func main_testGo() (*asset, error) {
	bytes, err := main_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main_test.go", size: 3005, mode: os.FileMode(436), modTime: time.Unix(1601753061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"blacklist.txt": blacklistTxt,
	"main.go":       mainGo,
	"main_test.go":  main_testGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"blacklist.txt": &bintree{blacklistTxt, map[string]*bintree{}},
	"main.go":       &bintree{mainGo, map[string]*bintree{}},
	"main_test.go":  &bintree{main_testGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
